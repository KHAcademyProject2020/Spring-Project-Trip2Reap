<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="hotelMapper">
	<select id="getHotelListCount" resultType="_int">
		SELECT COUNT(*)
		FROM HOTEL_VIEW
	</select>

	<select id="selectHotelList" resultMap="hotelResultSet">
		SELECT *
		FROM HOTEL_VIEW
		ORDER BY BO_NO DESC
	</select>
	<resultMap type="Hotel" id="hotelResultSet">
		<id property="boNo" column="BO_NO"/>
		<result property="caCode" column="CA_CODE"/>
		<result property="boTitle" column="BO_TITLE"/>
		<result property="boContent" column="BO_CONTENT"/>
		<result property="memberId" column="MEMBER_ID"/>
		<result property="boCount" column="BO_COUNT"/>
		<result property="boTag" column="BO_TAG"/>
		<result property="boDeleteYN" column="BO_DELETE_YN"/>
		<result property="regDate" column="REGDATE"/>
		<result property="hotelAddr" column="HOTEL_ADDRESS"/>
		<result property="hotelLocalCode" column="HOTEL_LOCAL_CODE"/>
		<result property="hotelSite" column="HOTEL_SITE"/>
		<result property="hotelTel" column="HOTEL_TEL"/>
		<result property="hotelReviewScore" column="HOTEL_REVIEW_SCORE"/>
		<result property="hotelRank" column="HOTEL_RANK"/>
		<result property="hotelOpenTime" column="HOTEL_OPEN_TIME"/>
		<result property="hotelCloseTime" column="HOTEL_CLOSE_TIME"/>

		<result property="hotelOptions" column="HOTEL_OPTION"/>

		<result property="hotelCheckInTime" column="CHECK_IN"/>
		<result property="hotelCheckOutTime" column="CHECK_OUT"/>
	</resultMap>


	<!-- 2020.11.25 - hotel DetailView -->
	<select id="selectOneHotel" resultMap="hotelResultSet">
		SELECT *
		FROM HOTEL_VIEW
		WHERE BO_NO=#{hId}

	</select>

	<update id="addReadCount">
		UPDATE HOTEL_VIEW
		SET BO_COUNT=BO_COUNT+1
		WHERE BO_NO=#{hId}
	</update>


	<!--2020.11.25- hotel DetailView - hId에 등록된 방개수 구하기  -->
	<select id="getRoomListCount" resultType="_int">
		SELECT COUNT(*)
		FROM ROOM
		WHERE BO_NO=#{hId}
	</select>

	<!-- 2020.11.25 - hId에 등록된 호텔 방 종류리스트 구하기 -->
	<select id="getRoomTypeList" resultType="string">
	SELECT DISTINCT ROOM_TYPE
	FROM ROOM
	WHERE BO_NO=#{hId}
	ORDER BY ROOM_TYPE
	</select>

	<!-- 2020.11.25 - hId에 등록된 호텔중 type에해당하는 방리스트를 구하기 -->
	<select id="searchRoomTypeList" resultMap="roomResultSet">
	SELECT *
	FROM ROOM
	WHERE BO_NO=#{hId} AND ROOM_TYPE=#{type}
	</select>

	<resultMap type="Room" id="roomResultSet">
		<id property="roomNo" column="ROOM_NO"/>
		<result property="boNo" column="BO_NO"/>
		<result property="roomType" column="ROOM_TYPE"/>
		<result property="roomName" column="ROOM_NAME"/>
		<result property="pricePerDay" column="PRICE_PER_DAY"/>
	</resultMap>


	<!-- 2020.11.26 - 호텔 예약페이지로 이동하기 -->
	<!--roomId에 해당하는 방종류 데이터 구하기. -->
	<select id="selectOneRoomInfo" resultMap="roomResultSet">
	SELECT *
	FROM ROOM
	WHERE ROOM_NO=#{roomId}
	</select>

	<!-- 2020.11.27- 호텔리스트에 방최소가격 나타내기 -->
	<select id="findHotelMinPrice" resultType="_int">
	SELECT DISTINCT MIN(PRICE_PER_DAY)
	FROM ROOM
	WHERE BO_NO=#{boNo}
	</select>

	<select id="selectMinPriceRoomList" resultType="_int">
	SELECT ROOM_NO
	FROM ROOM
	WHERE BO_NO=#{hId} AND PRICE_PER_DAY=#{minPrice}
	ORDER BY ROOM_NO
	</select>

	<select id="isSmashedLikeBtn" resultType="_int">
	SELECT COUNT(*)
	FROM LIKES
	WHERE BO_NO=#{hId} AND MEMBER_ID=#{loginUserId} AND LIKE_YN='Y'
	</select>

	<update id="cancelLikeHotel">
	UPDATE LIKES
	SET LIKE_YN='N'
	WHERE BO_NO=#{hId} AND MEMBER_ID=#{loginUserId}
	</update>


	<!--  좋아요 반영 -->
	<select id="isCanceledLikeBtn" resultType="_int">
	SELECT COUNT(*)
	FROM LIKES
	WHERE BO_NO=#{hId} AND MEMBER_ID=#{loginUserId} AND LIKE_YN='N'
	</select>

	<update id="updateLikeHotel">
	UPDATE LIKES
	SET LIKE_YN='Y'
	WHERE BO_NO=#{hId} AND MEMBER_ID=#{loginUserId}
	</update>

	<insert id="insertLikeHotel">
	INSERT INTO LIKES VALUES(#{hId},'Y',#{loginUserId})
	</insert>
	
	
	<!-- 2020.11.30 -->
	<!-- 좋아요 개수 카운트  -->
	<select id="countHotelLike" resultType="_int">
	SELECT COUNT(*)
	FROM LIKES
	WHERE BO_NO=#{hId} AND LIKE_YN='Y'
	</select>
	
	<!-- 호텔 리뷰 등록  -->
	<insert id ="insertReview">
	INSERT INTO REPLY
	VALUES(SEQ_RE_NO.NEXTVAL, #{boNo}, #{memberId}, SYSDATE, #{reContent}, DEFAULT)
	
	</insert>
	
	<insert id="insertHotelReview">
	INSERT INTO HOTEL_REVIEW
	VALUES(SEQ_RE_NO.CURRVAL, #{reviewScore})
	</insert>
	
	
	<resultMap  id="replyResultSet" type="HotelReply">
		<id property="reNo" column="RE_NO"/>
		<result property="boNo" column="BO_NO"/>
		<result property="memberId" column="MEMBER_ID"/>
		<result property="reDate" column="RE_DATE"/>	
		<result property="reContent" column="RE_CONTENT"/>
		<result property="reDeleteYN" column="RE_DELETE_YN"/>
		<result property="reviewScore" column="REVIEW_SCORE"/>
	</resultMap>
	
	
	<!-- 호텔 리뷰 보여주기  -->
	<select id="selectOneHotelReplyList" resultMap="replyResultSet">
	SELECT *
	FROM REPLY JOIN HOTEL_REVIEW USING(RE_NO)
	WHERE BO_NO=#{hId} AND RE_DELETE_YN='N'
	ORDER BY RE_NO DESC
	</select>
	
	
	<!-- 호텔 리뷰 작성자 닉네임  리스트 -->
	<select id="selectOneHotelReplyNickNameList" resultType="string">
	SELECT NICKNAME
	FROM MEMBER JOIN REPLY USING (MEMBER_ID)
	WHERE RE_DELETE_YN='N' AND BO_NO=#{hId}
	ORDER BY RE_NO DESC
	</select>
	
	<!-- 호텔점수 갱신하기  -->
	<update id="updateHotelReviewScore">
	UPDATE HOTEL
	SET HOTEL_REVIEW_SCORE=(
							SELECT AVG(REVIEW_SCORE)
							FROM REPLY JOIN HOTEL_REVIEW USING(RE_NO) 
							WHERE BO_NO=#{hId} AND RE_DELETE_YN='N')
	WHERE BO_NO=#{hId}
	</update>
	
	<!-- 호텔점수 갱신하기(호텔리뷰개수가 0개일때) -->
	<update id="deleteHotelReviewScoreZero">
	UPDATE HOTEL
	SET HOTEL_REVIEW_SCORE=0
	WHERE BO_NO=#{boNo}
	</update>
	
	
	<!-- 호텔리뷰삭제하기 -->
	<update id="deleteHotelReview">
	UPDATE REPLY
	SET RE_DELETE_YN='Y'
	WHERE BO_NO=#{boNo} AND RE_NO=#{reNo} AND RE_DELETE_YN='N'
	</update>
	
	<!--호텔리뷰 삭제이후에, 리뷰개수 카운트 -->
	<select id="countHotelReview" resultType="_int">
	SELECT COUNT(*)
	FROM REPLY
	WHERE BO_NO=#{boNo} AND RE_DELETE_YN='N'
	</select>
	
	


</mapper>
